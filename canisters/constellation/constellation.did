type HeaderField = record { text; text; };

type HttpRequest = record {
    method: text;
    url: text;
    headers: vec HeaderField;
    body: blob;
    certificate_version: opt nat16;
};

type HttpUpdateRequest = record {
    method: text;
    url: text;
    headers: vec HeaderField;
    body: blob;
};

type HttpResponse = record {
    status_code: nat16;
    headers: vec HeaderField;
    body: blob;
    upgrade : opt bool;
    streaming_strategy: opt StreamingStrategy;
};

// Each canister that uses the streaming feature gets to choose their concrete
// type; the HTTP Gateway will treat it as an opaque value that is only fed to
// the callback method

type StreamingToken = text;

type StreamingCallbackHttpResponse = record {
    body: blob;
    token: opt StreamingToken;
};

type StreamingStrategy = variant {
    Callback: record {
        callback: func (StreamingToken) -> (opt StreamingCallbackHttpResponse) query;
        token: StreamingToken;
    };
};


// **ICRC3 TYPES**


// ICRC3 standard types
type ICRC3Value = variant {
    Map : vec record { text; ICRC3Value };  
    Text : text;
    Nat : nat;
    Blob : vec nat8;
    Int : int;
    Nat64 : nat64;
    Int64 : int64;
};

// Archive types
type GetArchivesArgs = record {
    from: opt principal;
};

type DataCertificate = record {
    certificate: opt vec nat8;
    hash_tree: vec nat8;
};

type BlockType = record {
    block_type: text;
    url: text;
};

type AddBlockInfo = record {
    kind: text;
    block_data: text;
    store_type: text;
};

type Result = variant { Ok : text; Err : text };
type DownloadResult = variant { Ok : vec nat8; Err : text };

service : {
    http_request: (request: HttpRequest) -> (HttpResponse) query;
    http_request_update: (request: HttpUpdateRequest) -> (HttpResponse);
    
    
    
    add_image: (image_name: text, image_type: text, image_data: blob) -> ();

    // **ICRC3 Methods**   
    "icrc3_get_archives" : (GetArchivesArgs) -> (vec record { canister_id: principal; start: nat; end: nat }) query;
    "icrc3_get_tip_certificate" : () -> (opt DataCertificate) query;
    "icrc3_supported_block_types" : () -> (vec BlockType) query;

    "initialize_icrc3_ledger" : (text) -> (text);
    "add_block": (AddBlockInfo) -> (text);
   
    "get_block": (nat) -> (opt ICRC3Value) query;
    "get_chain_length": () -> (nat64) query;
    "get_genesis_block": () -> (opt ICRC3Value) query;
    "get_metadata_value": (text) -> (opt ICRC3Value) query;
    "get_all_metadata_values": () -> (opt vec record { text; ICRC3Value }) query;
    
    "get_latest_block": (nat) -> (vec ICRC3Value) query;
    "get_entire_chain": () -> (vec ICRC3Value) query;
    "verify_chain_integrity" : () -> (bool) query;
    "get_block_by_hash": (text) -> (opt ICRC3Value) query; 
    "chain_info": () -> (text) query;
    "get_blocks_by_type": (text) -> (vec ICRC3Value) query;
    "get_all_block_types": () -> (vec text) query;
    "get_block_type_counts": () -> (vec record { text; nat64 }) query;  
 

    // Json functions 
    "json_get_genesis_block": () -> (text) query;
    "json_get_block": (nat) -> (text) query;
    "json_get_entire_chain": () -> (text) query;
    "json_get_public_metadata": () -> (text) query;
    "json_get_all_metadata_values": () -> (text) query;
    "json_get_block_by_hash": (text) -> (text) query;
    "json_get_metadata_value": (text) -> (text) query;
    "json_get_blocks_by_type": (text) -> (text) query;
   
    // Services
    "update_nft_owner_of_service": (text, nat64) -> (Result);
    "get_nft_owner_of_service": (nat64) -> (text) query;
    "set_contract_address": (text) -> (text);
    "get_contract_address": () -> (text) query;  
    "get_siwe_principal_eth_address_service": () -> (text);
    "is_token_owner_service": (nat64) -> (bool);
    
   
}